on:
  workflow_call:
    inputs:
      pkgid:
        description: "Package ID"
        required: true
        type: string
jobs:
  build:
    name: "Build ${{ inputs.pkgid }}"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo
            backend/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('backend/Cargo.lock') }}
      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            musl-tools jq curl lld clang cmake protobuf-compiler \
            libprotobuf-dev
      - name: Setup Rust
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - name: Setup Rustfmt
        run: rustup component add rustfmt
      - name: Target to x86_64-unknown-linux-musl
        run: rustup target add x86_64-unknown-linux-musl
      - name: "Extract musl dependencies"
        run: |
          mkdir ../deps
          tar xJvf openssl.txz -C ../deps
          tar xJvf gmp.txz -C ../deps
          tar xJvf mpfr.txz -C ../deps
          tar xJvf mpc.txz -C ../deps
        working-directory: ./.github
      - name: "Download Library artifacts"
        uses: actions/download-artifact@v4
        with:
          name: target.tzst
          path: backend
      - name: "Extract Library artifacts"
        run: |
          tar --zstd -xvf target.tzst
        working-directory: ./backend
      - name: "Build the package"
        run: |
          cargo build -r \
            --target x86_64-unknown-linux-musl \
            -p ${{ inputs.pkgid }}
        working-directory: ./backend
      - name: "Compress the binary"
        run: |
          zstd -19 -T0 -o ${{ inputs.pkgid }}.zst \
            target/x86_64-unknown-linux-musl/release/${{ inputs.pkgid }}
        working-directory: ./backend
      - name: "Upload the package"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.pkgid }}.zst
          path: backend/${{ inputs.pkgid }}.zst

  docker-deploy:
    name: "Deploy ${{ inputs.pkgid }} to ghcr.io (Docker)"
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: "Download Built Package"
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.pkgid }}.zst
          path: ./backend
      - name: "Extract Built Package"
        run: zstd -d ${{ inputs.pkgid }}.zst
        working-directory: ./backend
      - name: "Log into the registry"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Docker metadata
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/hiroaki-yamamoto/${{ inputs.pkgid }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./backend/prod.dockerfile
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          build-args: |
            SERVICE=${{ inputs.pkgid }}
